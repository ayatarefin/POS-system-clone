/*!
 * Toastr v1.0
 *
 * Copyright Wisp X
 * Released under the MIT license
 *
 * Date: 2018-08-20 16:50
 * Link: https://gitee.com/wispx
 */


// Extending jQuery with a new method toastr
$.extend({
    toastr: {
        // Default options for toastr notifications
        options: {
            time: 3000,
            position: "top-right",
            size: "",
            callback: function () {},
        },
        // Method to configure toastr options
        config: function (options) {
            Object.keys(options).forEach(
                function (key) {
                    this.options[key] = options[key];
                }.bind(this)
            );
        },
        // Method to create or retrieve the toastr container
        container: function (position) {
            // Setting the position to default if not provided
            position = position ? position : this.options.position;
            // Checking if toastr container with the specified position exists
            var container = $("body .toastr-container");
            if (!container.hasClass(position)) {
                // Creating a new toastr container if it doesn't exist
                $("body").append(
                    '<div class="toastr-container ' +
                        position +
                        '"><ul></ul></div>'
                );
            }
            // Returning the toastr container
            return $("body .toastr-container." + position);
        },
        // Method to create a new toastr notification
        create: function (type, msg, options) {
            var self = this;
            // Setting default values if not provided
            msg = msg || "null";
            options = options || {};
            var time = options.time ? options.time : this.options.time,
                position = options.position
                    ? options.position
                    : this.options.position,
                size = options.size ? options.size : this.options.size,
                callback = options.callback
                    ? options.callback
                    : this.options.callback;
            // Setting fade effects for different positions
            var fades = {
                    "top-left": { fadeIn: "left", fadeOut: "left" },
                    "top-center": { fadeIn: "top", fadeOut: "bottom" },
                    "top-right": { fadeIn: "right", fadeOut: "right" },
                    "right-bottom": { fadeIn: "right", fadeOut: "right" },
                    "bottom-center": { fadeIn: "top", fadeOut: "bottom" },
                    "left-bottom": { fadeIn: "left", fadeOut: "left" },
                },
                id = "toastr-" + new Date().getTime();
            // Appending a new toastr item to the container
            this.container(position)
                .find("> ul")
                .prepend(
                    '<li class="' +
                        size +
                        " fade-in-" +
                        fades[position].fadeIn +
                        " " +
                        id +
                        " toastr-" +
                        type +
                        '">' +
                        msg +
                        "</li>"
                );
            // Retrieving the newly added toastr item
            var li = this.container(position).find("." + id),
                fadeOut = "fade-out-" + fades[position].fadeOut,
                // Setting a timer to close the toastr after a specified time
                timer = setTimeout(function () {
                    clearTimeout(timer);
                    li.unbind("click");
                    self.close(li, fadeOut, callback);
                }, time);
            // Adding a click event to close the toastr when clicked
            li.click(function () {
                clearTimeout(timer);
                self.close(li, fadeOut, callback);
            });
        },
        // Method to close a toastr item
        close: function (li, fadeOut, callback) {
            li.addClass(fadeOut);
            // Removing the toastr item after a fade-out animation
            setTimeout(function () {
                li.remove();
            }, 300);
            // Executing the callback function
            callback();
            // Removing empty toastr containers after a delay
            setTimeout(function () {
                $("body .toastr-container").each(function (i, v) {
                    if ($(v).find("ul li").length <= 0) {
                        $(v).remove();
                    }
                });
            }, 500);
        },
        // Method to clear all toastr notifications
        clear: function () {
            // Fading out and removing the toastr container
            var container = $("body .toastr-container");
            container.length >= 0 && container.fadeOut(1000);
            setTimeout(function () {
                container.remove();
            }, 2000);
        },
        // Shortcut method for creating a success toastr notification
        success: function (msg, options) {
            this.create("success", msg, options);
        },
        // Shortcut method for creating an info toastr notification
        info: function (msg, options) {
            this.create("info", msg, options);
        },
        // Shortcut method for creating a warning toastr notification
        warning: function (msg, options) {
            this.create("warning", msg, options);
        },
        // Shortcut method for creating an error toastr notification
        error: function (msg, options) {
            this.create("error", msg, options);
        },
    },
});
